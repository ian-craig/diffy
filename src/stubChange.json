[
  {
    "name": "Staged",
    "files": [
      {
        "left": {
          "path": ".gitignore",
          "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# testing\n/coverage\n\n# production\n/build\n\n# misc\n.DS_Store\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n**/samples"
        },
        "right": {
          "path": ".gitignore",
          "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# testing\n/coverage\n\n# production\n/build\ndist/\n\n# misc\n.DS_Store\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n**/samples"
        }
      },
      {
        "right": {
          "path": ".vscode/launch.json",
          "content": "{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n      {\n        \"name\": \"Debug Main Process\",\n        \"type\": \"node\",\n        \"request\": \"launch\",\n        \"cwd\": \"${workspaceRoot}\",\n        \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/electron\",\n        \"windows\": {\n          \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/electron.cmd\"\n        },\n        \"args\" : [\".\"],\n        \"outputCapture\": \"std\"\n      }\n    ]\n  }"
        }
      },
      {
        "left": {
          "path": "src/DataStructures/IChangeList.ts",
          "content": "import { IFileCompare } from \"./IFileCompare\";\n\nexport interface IChangeList {\n    name: string;\n    files: IFileCompare[];\n}"
        },
        "right": {
          "path": "DataStructures/IChangeList.ts",
          "content": "import { IFileCompare } from \"./IFileCompare\";\n\nexport interface IChangeList {\n    name: string;\n    files: IFileCompare[];\n}"
        }
      },
      {
        "left": {
          "path": "src/DataStructures/IFile.ts",
          "content": "export interface IFile {\n    path: string;\n    content: string;\n}"
        },
        "right": {
          "path": "DataStructures/IFile.ts",
          "content": "export interface IFile {\n    path: string;\n    content: string;\n}"
        }
      },
      {
        "left": {
          "path": "src/DataStructures/IFileCompare.ts",
          "content": "import { IFile } from \"./IFile\";\n\nexport interface IFileCompare {\n    left: IFile;\n    right: IFile;\n}"
        },
        "right": {
          "path": "DataStructures/IFileCompare.ts",
          "content": "import { IFile } from \"./IFile\";\n\nexport interface IFileCompare {\n    left: IFile | undefined;\n    right: IFile | undefined;\n}"
        }
      },
      {
        "right": {
          "path": "DataStructures/IProvider.ts",
          "content": "import { IChangeList } from \"./IChangeList\";\n\n/**\n * Process command line args and attempt to find a diff.\n * @returns undefined if no diff found with this plugin, otherwise an IPlugin instance\n */\nexport type ProviderFactory = (args: string[], cwd: string) => Promise<IProvider | undefined>;\n\nexport interface IProvider {\n    /**\n     * Fetch changeslists for a given command line input.\n     * @param args Command line arguments (not including the program name)\n     * @param cwd The directory the tool was invoked in\n     */\n    getChanges(): Promise<IChangeList[]>;\n}"
        }
      },
      {
        "right": {
          "path": "plugins/GitPlugin.ts",
          "content": "import * as Git from 'nodegit';\nimport { IChangeList } from '../DataStructures/IChangeList';\nimport { IProvider, ProviderFactory } from '../DataStructures/IProvider';\nimport { readFile } from 'fs';\n\nconst readFileAsync = async (filePath: string, encoding: string = 'utf8'): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        readFile(filePath, { encoding }, (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.toString());\n            }\n        })\n    })\n}\n\nclass GitPlugin implements IProvider {\n    constructor(private readonly repo: Git.Repository, private readonly args: string[]) {\n    }\n\n    private async getFileInfo(diffFile: Git.DiffFile, readFromFile: boolean = false) {\n        if (diffFile.size() === 0) {\n            // This was a deletion (if left) or addition (if right)\n            return undefined;\n        }\n        const contentPromise = readFromFile ?\n            readFileAsync(diffFile.path()) :\n            this.repo.getBlob(diffFile.id()).then(blob => blob.content().toString());\n\n        return {\n            path: diffFile.path(),\n            content: await contentPromise,\n        };\n    };\n\n    public async getChanges(): Promise<IChangeList[]> {\n        const changeLists: IChangeList[] = [\n            {\n                name: \"Staged\",\n                files: [],\n            },\n            {\n                name: \"Unstaged\",\n                files: [],\n            },\n        ];\n        const statusFiles = await this.repo.getStatusExt();\n        for (const status of statusFiles) {\n            await Promise.all([status.headToIndex(), status.indexToWorkdir()].map(async (diff, index) => {\n                if (diff !== null) {\n                    const [left, right] = await Promise.all([\n                        this.getFileInfo((diff.oldFile as any)()),\n                        this.getFileInfo((diff.newFile as any)(), index === 1),\n                    ])\n                    changeLists[index].files.push({ left, right });\n                }\n            }));\n        }\n        return changeLists;\n    };\n}\n\nconst factory: ProviderFactory = async (args: string[], cwd: string): Promise<IProvider | undefined> => {\n    console.log(\"Factory\", cwd);\n    try {\n        const repo = await Git.Repository.open(cwd);\n        console.log(repo);\n        return new GitPlugin(repo, args);\n    } catch (error) {\n        console.log(error);\n    }\n\n    return undefined;\n}\n\nexport default factory;"
        }
      },
      {
        "right": {
          "path": "plugins/tsconfig.json",
          "content": "{ \n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"lib\": [\"esnext\"],\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"outDir\": \"dist\"\n  },\n}"
        }
      },
      {
        "left": {
          "path": "public/electron.js",
          "content": "const electron = require(\"electron\");\nconst app = electron.app;\nconst BrowserWindow = electron.BrowserWindow;\nconst path = require(\"path\");\nconst isDev = require(\"electron-is-dev\");\nlet mainWindow;\nfunction createWindow() {\n    mainWindow = new BrowserWindow({ width: 900, height: 680 });\n    mainWindow.loadURL(\n        isDev\n            ? \"http://localhost:3000\"\n            : `file://${path.join(__dirname, \"../build/index.html\")}`\n    );\n    mainWindow.on(\"closed\", () => (mainWindow = null));\n}\napp.on(\"ready\", createWindow);\napp.on(\"window-all-closed\", () => {\n    if (process.platform !== \"darwin\") {\n        app.quit();\n    }\n});\napp.on(\"activate\", () => {\n    if (mainWindow === null) {\n        createWindow();\n    }\n});"
        }
      },
      {
        "left": {
          "path": "public/robots.txt",
          "content": "# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\n"
        }
      },
      {
        "left": {
          "path": "src/Components/App.tsx",
          "content": "import React from 'react';\nimport './App.css';\nimport { FileEditor } from './FileEditor';\nimport { FileList } from './FileList';\nimport SplitPane from 'react-split-pane';\nimport { IChangeList } from '../DataStructures/IChangeList';\nimport { IFileCompare } from '../DataStructures/IFileCompare';\n\nexport interface IAppProps {\n  changeLists: IChangeList[];\n}\n\ninterface IState {\n  codeWidth: number;\n  codeHeight: number;\n  selectedFile: IFileCompare | undefined;\n}\n\nclass App extends React.Component<IAppProps, IState> {\n  private listWidth = 200;\n\n  public constructor(props: IAppProps) {\n    super(props);\n\n    this.state = {\n      codeWidth: 0,\n      codeHeight: 0,\n      selectedFile: undefined,\n    };\n  }\n\n  private readonly onFileChange = (file: IFileCompare) => {\n    this.setState({\n      selectedFile: file,\n    });\n  }\n\n  private readonly onResize = (size?: number) => {\n    if (size !== undefined) {\n      this.listWidth = size;\n    }\n    this.setState({\n      codeWidth: window.innerWidth - this.listWidth - 3,\n      codeHeight: window.innerHeight,\n    });\n  }\n\n  componentDidMount() {\n    this.onResize();\n    window.addEventListener('resize', () => this.onResize());\n  }\n\n  public render() {\n    return (\n      <div className=\"App\">\n        <SplitPane split=\"vertical\" minSize={50} defaultSize={this.listWidth} onChange={this.onResize}>\n          <FileList changeLists={this.props.changeLists} onFileChange={this.onFileChange} />\n          <FileEditor file={this.state.selectedFile} width={this.state.codeWidth} height={this.state.codeHeight} />\n        </SplitPane>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"
        },
        "right": {
          "path": "src/Components/App.tsx",
          "content": "import React from 'react';\nimport './App.css';\nimport { FileEditor } from './FileEditor';\nimport { FileList } from './FileList';\nimport SplitPane from 'react-split-pane';\nimport { IFileCompare } from '../../DataStructures/IFileCompare';\nimport { IProvider } from '../../DataStructures/IProvider';\nimport { IChangeList } from '../../DataStructures/IChangeList';\n\nexport interface IAppProps {\n  provider: IProvider;\n}\n\ninterface IState {\n  codeWidth: number;\n  codeHeight: number;\n  selectedFile: IFileCompare | undefined;\n  changeLists: IChangeList[];\n}\n\nclass App extends React.Component<IAppProps, IState> {\n  private listWidth = 240;\n\n  public constructor(props: IAppProps) {\n    super(props);\n\n    this.state = {\n      codeWidth: 0,\n      codeHeight: 0,\n      selectedFile: undefined,\n      changeLists: [],\n    };\n  }\n\n  private readonly onFileChange = (file: IFileCompare) => {\n    this.setState({\n      selectedFile: file,\n    });\n  }\n\n  private readonly onResize = (size?: number) => {\n    if (size !== undefined) {\n      this.listWidth = size;\n    }\n    this.setState({\n      codeWidth: window.innerWidth - this.listWidth - 3,\n      codeHeight: window.innerHeight,\n    });\n  }\n\n  componentDidMount() {\n    this.onResize();\n    window.addEventListener('resize', () => this.onResize());\n\n    this.props.provider.getChanges().then(changeLists => {\n      this.setState({ changeLists });\n    });\n  }\n\n  public render() {\n    return (\n      <div className=\"App\">\n        <SplitPane split=\"vertical\" minSize={50} defaultSize={this.listWidth} onChange={this.onResize}>\n          <FileList changeLists={this.state.changeLists} onFileChange={this.onFileChange} />\n          <FileEditor file={this.state.selectedFile} width={this.state.codeWidth} height={this.state.codeHeight} />\n        </SplitPane>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"
        }
      },
      {
        "left": {
          "path": "src/Components/FileEditor.tsx",
          "content": "import React from 'react';\nimport * as monaco from 'monaco-editor';\nimport { IFileCompare } from '../DataStructures/IFileCompare';\nimport { CommandBar } from 'office-ui-fabric-react/lib/CommandBar';\n\nexport interface IFileEditorProps {\n  width: number;\n  height: number;\n  file: IFileCompare | undefined;\n}\n\ninterface IState {\n  renderSideBySide: boolean;\n}\n\nexport class FileEditor extends React.Component<IFileEditorProps, IState> {\n  private containerRef = React.createRef<HTMLDivElement>();\n  private editor!: monaco.editor.IStandaloneDiffEditor;\n  private navigator!:  monaco.editor.IDiffNavigator;\n\n  constructor(props: IFileEditorProps) {\n    super(props);\n\n    this.state = {\n      renderSideBySide: false, //TODO Persist settings in some store?\n    }\n  }\n\n  componentDidMount() {\n    const containerElement = this.containerRef.current;\n    if (containerElement === null) {\n      throw new Error(\"Expected container to be initialized.\");\n    }\n    this.editor = monaco.editor.createDiffEditor(containerElement, {\n      renderSideBySide: this.state.renderSideBySide\n    });\n\n    this.navigator = monaco.editor.createDiffNavigator(this.editor, {\n      followsCaret: true, // resets the navigator state when the user selects something in the editor\n      ignoreCharChanges: true // jump from line to line\n    });\n\n    this.editor.layout({ width: this.props.width, height: this.props.height });\n\n    /*\n    editor.onDidChangeModelContent(() => {\n      editor.getValue()...\n    });\n    */\n  }\n\n  private updateModel() {\n    let leftContent = \"\";\n    let rightContent = \"\";\n    if (this.props.file !== undefined) {\n      leftContent = this.props.file.left.content;\n      rightContent = this.props.file.right.content;\n    }\n\n    const currentModel = this.editor.getModel();\n    if (currentModel && currentModel.original) {\n      currentModel.original.dispose();\n      currentModel.modified.dispose();\n    }\n\n    this.editor.setModel({\n      original: monaco.editor.createModel(leftContent, \"text/plain\"),\n      modified: monaco.editor.createModel(rightContent, \"text/plain\")\n    });\n\n    this.navigator.next();\n  }\n\n  componentDidUpdate(prevProps: IFileEditorProps) {\n    if (this.props.file !== undefined && this.props.file !== prevProps.file) {\n      this.updateModel();\n    }\n\n    /*\n    if (prevProps.language !== this.props.language) {\n      monaco.editor.setModelLanguage(model, this.props.language);\n    }\n    */\n\n    if (this.editor && (this.props.width !== prevProps.width || this.props.height !== prevProps.height)) {\n      this.editor.layout({ width: this.props.width, height: this.props.height });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.editor) {\n      const model = this.editor.getModel();\n      if (model) {\n        model.original.dispose();\n        model.modified.dispose();\n      }\n      this.editor.dispose();\n      this.navigator.dispose();\n    }\n  }\n\n  private getFarItems() {\n    return [\n      {\n        key: 'renderSideBySide',\n        name: this.state.renderSideBySide ? 'Inline Diff' : 'Side-By-Side Diff',\n        ariaLabel: 'Diff Layout',\n        iconProps: {\n          iconName: this.state.renderSideBySide ? 'DiffInline' : 'DiffSideBySide',\n        },\n        onClick: () => {\n          this.setState({ renderSideBySide: !this.state.renderSideBySide });\n          //TODO this doesn't update the component. Need\n        }\n      },\n    ];\n  };\n\n  render() {\n    return (\n      <>\n        <CommandBar\n            items={[]}\n            farItems={this.getFarItems()}\n          />\n        <div ref={this.containerRef} />\n      </>\n    );\n  }\n}\n"
        },
        "right": {
          "path": "src/Components/FileEditor.tsx",
          "content": "import React from 'react';\nimport * as monaco from 'monaco-editor';\nimport { IFileCompare } from '../../DataStructures/IFileCompare';\nimport { CommandBar } from 'office-ui-fabric-react/lib/CommandBar';\n\nexport interface IFileEditorProps {\n  width: number;\n  height: number;\n  file: IFileCompare | undefined;\n}\n\ninterface IState {\n  renderSideBySide: boolean;\n}\n\nexport class FileEditor extends React.Component<IFileEditorProps, IState> {\n  private containerRef = React.createRef<HTMLDivElement>();\n  private editor!: monaco.editor.IStandaloneDiffEditor;\n  private navigator!:  monaco.editor.IDiffNavigator;\n\n  constructor(props: IFileEditorProps) {\n    super(props);\n\n    this.state = {\n      renderSideBySide: false, //TODO Persist settings in some store?\n    }\n  }\n\n  componentDidMount() {\n    const containerElement = this.containerRef.current;\n    if (containerElement === null) {\n      throw new Error(\"Expected container to be initialized.\");\n    }\n    this.editor = monaco.editor.createDiffEditor(containerElement, {\n      renderSideBySide: this.state.renderSideBySide\n    });\n\n    this.navigator = monaco.editor.createDiffNavigator(this.editor, {\n      followsCaret: true, // resets the navigator state when the user selects something in the editor\n      ignoreCharChanges: true // jump from line to line\n    });\n\n    this.editor.layout({ width: this.props.width, height: this.props.height });\n\n    /*\n    editor.onDidChangeModelContent(() => {\n      editor.getValue()...\n    });\n    */\n  }\n\n  private updateModel() {\n    let leftContent = \"\";\n    let rightContent = \"\";\n    if (this.props.file !== undefined) {\n      leftContent = this.props.file.left === undefined ? \"\" : this.props.file.left.content;\n      rightContent = this.props.file.right === undefined ? \"\" : this.props.file.right.content;\n    }\n\n    const currentModel = this.editor.getModel();\n    if (currentModel && currentModel.original) {\n      currentModel.original.dispose();\n      currentModel.modified.dispose();\n    }\n\n    this.editor.setModel({\n      original: monaco.editor.createModel(leftContent, \"text/plain\"),\n      modified: monaco.editor.createModel(rightContent, \"text/plain\")\n    });\n\n    this.navigator.next();\n  }\n\n  componentDidUpdate(prevProps: IFileEditorProps) {\n    if (this.props.file !== undefined && this.props.file !== prevProps.file) {\n      this.updateModel();\n    }\n\n    /*\n    if (prevProps.language !== this.props.language) {\n      monaco.editor.setModelLanguage(model, this.props.language);\n    }\n    */\n\n    if (this.editor && (this.props.width !== prevProps.width || this.props.height !== prevProps.height)) {\n      this.editor.layout({ width: this.props.width, height: this.props.height });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.editor) {\n      const model = this.editor.getModel();\n      if (model && model.original) {\n        model.original.dispose();\n        model.modified.dispose();\n      }\n      this.editor.dispose();\n      this.navigator.dispose();\n    }\n  }\n\n  private getFarItems() {\n    return [\n      {\n        key: 'renderSideBySide',\n        name: this.state.renderSideBySide ? 'Inline Diff' : 'Side-By-Side Diff',\n        ariaLabel: 'Diff Layout',\n        iconProps: {\n          iconName: this.state.renderSideBySide ? 'DiffInline' : 'DiffSideBySide',\n        },\n        onClick: () => {\n          this.setState({ renderSideBySide: !this.state.renderSideBySide });\n          //TODO this doesn't update the component. Need\n        }\n      },\n    ];\n  };\n\n  render() {\n    return (\n      <>\n        <CommandBar\n            items={[]}\n            farItems={this.getFarItems()}\n          />\n        <div ref={this.containerRef} />\n      </>\n    );\n  }\n}\n"
        }
      },
      {
        "left": {
          "path": "src/Components/FileList.tsx",
          "content": "import React from 'react';\nimport { IChangeList } from '../DataStructures/IChangeList';\nimport { IFileCompare } from '../DataStructures/IFileCompare';\nimport './FileList.css';\n\nconst List = require('react-list-select').default;\n\nexport interface IFileListProps {\n    changeLists: IChangeList[];\n    onFileChange: (file: IFileCompare) => void;\n}\n\ninterface IState {\n    selected: number[];\n}\n\nexport class FileList extends React.Component<IFileListProps, IState> {\n    private items: JSX.Element[] = [];\n    private disabled: number[] = [];\n    private itemMap = new Map<number, IFileCompare>();\n\n    public constructor(props: IFileListProps) {\n        super(props);\n\n        this.props.changeLists.forEach((cl, cIndex) => {\n            this.disabled.push(this.items.length);\n            this.items.push(<div key={`cl-${cIndex}-title`}>{cl.name}</div>);\n\n            cl.files.forEach((f, fIndex) => {\n                this.itemMap.set(this.items.length, f);\n                this.items.push(<div key={`cl-${cIndex}-${fIndex}`}>{f.right.path}</div>);\n            });\n        });\n\n        this.state = {\n            selected: [],\n        };\n    }\n\n    private readonly onChange = (selectedIndex: number) => {\n        console.log(selectedIndex);\n        const newFile = this.itemMap.get(selectedIndex);\n        this.props.onFileChange(newFile as IFileCompare);\n        this.setState({\n            selected: [selectedIndex]\n        })\n    }\n\n    public render() {\n        return (\n            <div style={{overflow: \"hidden\" }}>\n                <List\n                    items={this.items}\n                    selected={this.state.selected}\n                    disabled={this.disabled}\n                    multiple={false}\n                    onChange={this.onChange}\n                />\n            </div>\n        );\n    }\n}"
        },
        "right": {
          "path": "src/Components/FileList.tsx",
          "content": "import React from 'react';\nimport { IChangeList } from '../../DataStructures/IChangeList';\nimport { IFileCompare } from '../../DataStructures/IFileCompare';\nimport './FileList.css';\nimport { IFile } from '../../DataStructures/IFile';\n\nconst List = require('react-list-select').default;\n\nexport interface IFileListProps {\n    changeLists: IChangeList[];\n    onFileChange: (file: IFileCompare) => void;\n}\n\ninterface IState {\n    selected: number[];\n    items: JSX.Element[];\n    disabled: number[];\n}\n\nexport class FileList extends React.Component<IFileListProps, IState> {\n    private itemMap = new Map<number, IFileCompare>();\n\n    public constructor(props: IFileListProps) {\n        super(props);\n\n        this.updateList();\n\n        this.state = {\n            selected: [],\n            items: [],\n            disabled: [],\n        };\n    }\n\n    private updateList() {\n        this.itemMap.clear();\n        const items: JSX.Element[] = [];\n        const disabled: number[] = [];\n\n        this.props.changeLists.forEach((cl, cIndex) => {\n            disabled.push(items.length);\n            items.push(<div key={`cl-${cIndex}-title`}>{cl.name}</div>);\n\n\n            cl.files.forEach((f, fIndex) => {\n                const path = f.right !== undefined ? f.right.path : (f.left as IFile).path;\n                this.itemMap.set(items.length, f);\n                items.push(<div key={`cl-${cIndex}-${fIndex}`}>{path}</div>);\n            });\n        });\n\n        this.setState({\n            items,\n            disabled,\n        });\n    }\n\n    public componentDidUpdate(oldProps: IFileListProps) {\n        if (this.props.changeLists !== oldProps.changeLists) {\n            this.updateList();\n        }\n    }\n\n    private readonly onChange = (selectedIndex: number) => {\n        console.log(selectedIndex);\n        const newFile = this.itemMap.get(selectedIndex);\n        this.props.onFileChange(newFile as IFileCompare);\n        this.setState({\n            selected: [selectedIndex]\n        })\n    }\n\n    public render() {\n        return (\n            <div style={{overflow: \"hidden\" }}>\n                <List\n                    items={this.state.items}\n                    selected={this.state.selected}\n                    disabled={this.state.disabled}\n                    multiple={false}\n                    onChange={this.onChange}\n                />\n            </div>\n        );\n    }\n}"
        }
      },
      {
        "left": {
          "path": "src/index.tsx",
          "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { initializeIcons } from '@uifabric/icons';\ninitializeIcons();\n\nconst changelist = require(`./samples/out.json`);\n\nReactDOM.render(<App changeLists={[changelist]} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
        },
        "right": {
          "path": "src/index.tsx",
          "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { initializeIcons } from '@uifabric/icons';\ninitializeIcons();\n\nlet provider;\n//@ts-ignore\nif (process.env.NODE_ENV !== 'production' && window.require === undefined) {\n    const { StubProvider } =  require('./StubProvider');\n    provider = new StubProvider();\n} else {\n    //@ts-ignore\n    const { remote } = window.require('electron');\n    provider = remote.getGlobal('provider');\n}\n\nReactDOM.render(<App provider={provider} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
        }
      },
      {
        "right": {
          "path": "src/StubProvider.ts",
          "content": "import { IChangeList } from \"../DataStructures/IChangeList\";\nimport { IProvider } from \"../DataStructures/IProvider\";\n\nexport class StubProvider implements IProvider {\n    public async getChanges(): Promise<IChangeList[]> {\n        return [require(`./samples/out.json`)];\n    };\n}"
        }
      },
      {
        "right": {
          "path": "types/electron.d.ts",
          "content": "declare module NodeJS  {\n    interface Global {\n        options: any\n    }\n}\n"
        }
      }
    ]
  },
  {
    "name": "Unstaged",
    "files": [
      {
        "right": {
          "path": "electron.js",
          "content": "const { app, BrowserWindow } = require(\"electron\");\r\nconst path = require(\"path\");\r\nconst isDev = require(\"electron-is-dev\");\r\n\r\nglobal.provider = undefined;\r\n\r\nconst plugins = [\r\n    require('./plugins/dist/plugins/GitPlugin').default,\r\n];\r\n\r\nlet mainWindow;\r\nconst createWindow = async () => {\r\n    const args = process.argv.slice(2);\r\n    const cwd = process.cwd();\r\n    for (const pluginFactory of plugins) {\r\n        const plugin = await pluginFactory(args, cwd);\r\n        console.log(\"Plugin\", plugin);\r\n        if (plugin !== undefined) {\r\n            global.provider = plugin;\r\n            break;\r\n        }\r\n    }\r\n\r\n    mainWindow = new BrowserWindow({\r\n        width: 900,\r\n        height: 680,\r\n        webPreferences: {\r\n            nodeIntegration: true\r\n        }\r\n    });\r\n    mainWindow.loadURL(\r\n        isDev\r\n            ? \"http://localhost:3000\"\r\n            : `file://${path.join(__dirname, \"../build/index.html\")}`\r\n    );\r\n    mainWindow.on(\"closed\", () => (mainWindow = null));\r\n}\r\napp.on(\"ready\", createWindow);\r\napp.on(\"window-all-closed\", () => {\r\n    if (process.platform !== \"darwin\") {\r\n        app.quit();\r\n    }\r\n});\r\napp.on(\"activate\", () => {\r\n    if (mainWindow === null) {\r\n        createWindow();\r\n    }\r\n});"
        }
      },
      {
        "left": {
          "path": "package.json",
          "content": "{\n  \"name\": \"monaco-diff\",\n  \"description\": \"A simple diff tool built on the Monaco code editor\",\n  \"author\": \"ian-craig\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@types/jest\": \"24.0.18\",\n    \"@types/node\": \"12.7.2\",\n    \"@types/react\": \"16.9.2\",\n    \"@types/react-dom\": \"16.9.0\",\n    \"cross-env\": \"^5.2.0\",\n    \"electron-is-dev\": \"^1.1.0\",\n    \"monaco-editor\": \"^0.17.1\",\n    \"office-ui-fabric-react\": \"^7.27.1\",\n    \"react\": \"^16.9.0\",\n    \"react-dom\": \"^16.9.0\",\n    \"react-list-select\": \"^0.4.1\",\n    \"react-monaco-editor\": \"^0.30.1\",\n    \"react-scripts\": \"3.1.1\",\n    \"react-split-pane\": \"^0.1.87\",\n    \"typescript\": \"3.5.3\"\n  },\n  \"main\": \"public/electron.js\",\n  \"build\": {\n    \"appId\": \"com.monacodiff\"\n  },\n  \"scripts\": {\n    \"react-start\": \"react-scripts start\",\n    \"react-build\": \"react-scripts build\",\n    \"react-test\": \"react-scripts test --env=jsdom\",\n    \"react-eject\": \"react-scripts eject\",\n    \"electron-build\": \"electron-builder\",\n    \"release\": \"yarn react-build && electron-builder --publish=always\",\n    \"build\": \"yarn react-build && yarn electron-build\",\n    \"start\": \"concurrently \\\"cross-env BROWSER=none yarn react-start\\\" \\\"wait-on http://localhost:3000 && electron .\\\"\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"^4.1.2\",\n    \"electron\": \"^6.0.3\",\n    \"electron-builder\": \"^21.2.0\",\n    \"wait-on\": \"^3.3.0\"\n  }\n}\n"
        },
        "right": {
          "path": "package.json",
          "content": "{\n  \"name\": \"monaco-diff\",\n  \"description\": \"A simple diff tool built on the Monaco code editor\",\n  \"author\": \"ian-craig\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@types/jest\": \"24.0.18\",\n    \"@types/node\": \"12.7.2\",\n    \"@types/nodegit\": \"^0.24.10\",\n    \"@types/react\": \"16.9.2\",\n    \"@types/react-dom\": \"16.9.0\",\n    \"cross-env\": \"^5.2.0\",\n    \"electron-is-dev\": \"^1.1.0\",\n    \"monaco-editor\": \"^0.17.1\",\n    \"nodegit\": \"^0.25.1\",\n    \"office-ui-fabric-react\": \"^7.27.1\",\n    \"react\": \"^16.9.0\",\n    \"react-dom\": \"^16.9.0\",\n    \"react-list-select\": \"^0.4.1\",\n    \"react-monaco-editor\": \"^0.30.1\",\n    \"react-scripts\": \"3.1.1\",\n    \"react-split-pane\": \"^0.1.87\",\n    \"typescript\": \"3.5.3\"\n  },\n  \"main\": \"electron.js\",\n  \"build\": {\n    \"appId\": \"com.monacodiff\"\n  },\n  \"scripts\": {\n    \"react-start\": \"react-scripts start\",\n    \"react-build\": \"react-scripts build\",\n    \"react-test\": \"react-scripts test --env=jsdom\",\n    \"react-eject\": \"react-scripts eject\",\n    \"electron-build\": \"electron-builder\",\n    \"electron-rebuild\": \"electron-rebuild\",\n    \"release\": \"yarn react-build && electron-builder --publish=always\",\n    \"build\": \"yarn react-build && yarn electron-build\",\n    \"compile:plugins\": \"tsc -p plugins/tsconfig.json\",\n    \"start\": \"concurrently \\\"cross-env BROWSER=none yarn react-start\\\" \\\"wait-on http://localhost:3000 && electron .\\\"\",\n    \"electron\": \"electron .\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"^4.1.2\",\n    \"electron\": \"^6.0.3\",\n    \"electron-builder\": \"^21.2.0\",\n    \"electron-rebuild\": \"^1.8.6\",\n    \"wait-on\": \"^3.3.0\"\n  }\n}\n"
        }
      },
      {
        "left": {
          "path": "src/Components/FileList.tsx",
          "content": "import React from 'react';\nimport { IChangeList } from '../../DataStructures/IChangeList';\nimport { IFileCompare } from '../../DataStructures/IFileCompare';\nimport './FileList.css';\nimport { IFile } from '../../DataStructures/IFile';\n\nconst List = require('react-list-select').default;\n\nexport interface IFileListProps {\n    changeLists: IChangeList[];\n    onFileChange: (file: IFileCompare) => void;\n}\n\ninterface IState {\n    selected: number[];\n    items: JSX.Element[];\n    disabled: number[];\n}\n\nexport class FileList extends React.Component<IFileListProps, IState> {\n    private itemMap = new Map<number, IFileCompare>();\n\n    public constructor(props: IFileListProps) {\n        super(props);\n\n        this.updateList();\n\n        this.state = {\n            selected: [],\n            items: [],\n            disabled: [],\n        };\n    }\n\n    private updateList() {\n        this.itemMap.clear();\n        const items: JSX.Element[] = [];\n        const disabled: number[] = [];\n\n        this.props.changeLists.forEach((cl, cIndex) => {\n            disabled.push(items.length);\n            items.push(<div key={`cl-${cIndex}-title`}>{cl.name}</div>);\n\n\n            cl.files.forEach((f, fIndex) => {\n                const path = f.right !== undefined ? f.right.path : (f.left as IFile).path;\n                this.itemMap.set(items.length, f);\n                items.push(<div key={`cl-${cIndex}-${fIndex}`}>{path}</div>);\n            });\n        });\n\n        this.setState({\n            items,\n            disabled,\n        });\n    }\n\n    public componentDidUpdate(oldProps: IFileListProps) {\n        if (this.props.changeLists !== oldProps.changeLists) {\n            this.updateList();\n        }\n    }\n\n    private readonly onChange = (selectedIndex: number) => {\n        console.log(selectedIndex);\n        const newFile = this.itemMap.get(selectedIndex);\n        this.props.onFileChange(newFile as IFileCompare);\n        this.setState({\n            selected: [selectedIndex]\n        })\n    }\n\n    public render() {\n        return (\n            <div style={{overflow: \"hidden\" }}>\n                <List\n                    items={this.state.items}\n                    selected={this.state.selected}\n                    disabled={this.state.disabled}\n                    multiple={false}\n                    onChange={this.onChange}\n                />\n            </div>\n        );\n    }\n}"
        },
        "right": {
          "path": "src/Components/FileList.tsx",
          "content": "import React from 'react';\r\nimport { IChangeList } from '../../DataStructures/IChangeList';\r\nimport { IFileCompare } from '../../DataStructures/IFileCompare';\r\nimport './FileList.css';\r\nimport { IFile } from '../../DataStructures/IFile';\r\n\r\nconst List = require('react-list-select').default;\r\n\r\nexport interface IFileListProps {\r\n    changeLists: IChangeList[];\r\n    onFileChange: (file: IFileCompare) => void;\r\n}\r\n\r\ninterface IState {\r\n    selected: number[];\r\n    items: JSX.Element[];\r\n    disabled: number[];\r\n}\r\n\r\nexport class FileList extends React.Component<IFileListProps, IState> {\r\n    private itemMap = new Map<number, IFileCompare>();\r\n\r\n    public constructor(props: IFileListProps) {\r\n        super(props);\r\n\r\n        this.updateList();\r\n\r\n        this.state = {\r\n            selected: [],\r\n            items: [],\r\n            disabled: [],\r\n        };\r\n    }\r\n\r\n    private updateList() {\r\n        this.itemMap.clear();\r\n        const items: JSX.Element[] = [];\r\n        const disabled: number[] = [];\r\n\r\n        this.props.changeLists.forEach((cl, cIndex) => {\r\n            disabled.push(items.length);\r\n            items.push(<div key={`cl-${cIndex}-title`}>{cl.name}</div>);\r\n\r\n\r\n            cl.files.forEach((f, fIndex) => {\r\n                const path = f.right !== undefined ? f.right.path : (f.left as IFile).path;\r\n                this.itemMap.set(items.length, f);\r\n                items.push(<div key={`cl-${cIndex}-${fIndex}`}>{path}</div>);\r\n            });\r\n        });\r\n\r\n        this.setState({\r\n            items,\r\n            disabled,\r\n        });\r\n    }\r\n\r\n    public componentDidUpdate(oldProps: IFileListProps) {\r\n        if (this.props.changeLists !== oldProps.changeLists) {\r\n            this.updateList();\r\n        }\r\n    }\r\n\r\n    private readonly onChange = (selectedIndex: number) => {\r\n        const newFile = this.itemMap.get(selectedIndex);\r\n        this.props.onFileChange(newFile as IFileCompare);\r\n        this.setState({\r\n            selected: [selectedIndex]\r\n        })\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div style={{overflow: \"hidden\" }}>\r\n                <List\r\n                    items={this.state.items}\r\n                    selected={this.state.selected}\r\n                    disabled={this.state.disabled}\r\n                    multiple={false}\r\n                    onChange={this.onChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}"
        }
      },
      {
        "left": {
          "path": "tsconfig.json",
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\n      \"dom\",\n      \"dom.iterable\",\n      \"esnext\"\n    ],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react\"\n  },\n  \"include\": [\n    \"src\"\n  ]\n}\n"
        },
        "right": {
          "path": "tsconfig.json",
          "content": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"es5\",\r\n    \"lib\": [\r\n      \"dom\",\r\n      \"dom.iterable\",\r\n      \"esnext\"\r\n    ],\r\n    \"allowJs\": true,\r\n    \"skipLibCheck\": true,\r\n    \"esModuleInterop\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"strict\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"module\": \"esnext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"resolveJsonModule\": true,\r\n    \"isolatedModules\": true,\r\n    \"noEmit\": true,\r\n    \"jsx\": \"react\"\r\n  },\r\n  \"typeRoots\": [\r\n    \"./node_modules/@types\",\r\n    \"./types/\"\r\n  ],\r\n  \"include\": [\r\n    \"src\",\r\n    \"DataStructures\"\r\n  ]\r\n}\r\n"
        }
      }
    ]
  }
]